AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation for Template Infrastructure.
Parameters:
  DnsFront:
    Description: DNS listening on Apache
    Type: String
    Default: template.ineat-group.com
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
  AMITemplateApp:
    Description: AMI Template ID of the Application
    Type: String
    Default: 'ami-dd8b3ca0'
    AllowedPattern: '^ami-.*'
    ConstraintDescription: must be a valid AMI ID eg. ami-xxxxxx.
  WebServerCount:
    Description: Number of EC2 instances to launch for the WebServer server
    Type: Number
    Default: '1'
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: ' The IP address range that can be used access the web server using SSH.'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  UserPassword:
    Description: Set password on App instances for user 'ec2-user'.
    Type: String
    MinLength: '8'
    MaxLength: '18'
    Default: 'Hy8Cqp5u'
Resources:
  IAMRoleApplication:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CloudWatchManageLogStream"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource:
                  - "arn:aws:logs:*:*:*"
  IAMInstanceProfileApplication:
    DependsOn: IAMRoleApplication
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref IAMRoleApplication
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.0.0.0/22
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.0.0/26
      AvailabilityZone:
        'Fn::Join':
          - ''
          - - |
            - !Ref 'AWS::Region'
            - 'a'
      VpcId: !Ref VPC
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.0.64/26
      AvailabilityZone:
        'Fn::Join':
          - ''
          - - |
            - !Ref 'AWS::Region'
            - 'a'
      VpcId: !Ref VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: !Ref VPC
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow access from SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
  SSHInternalSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow internal access from SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '10.0.0.0/22'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '10.0.0.0/22'
  NATSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Public ELB Security Group with HTTP access on port 80 from the internet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '433'
  PublicLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Public ELB Security Group with HTTP access on port 80 from the internet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow HTTP/HTTPS access from Load Balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup
  PublicElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: 'HTTP:80/'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '90'
        Timeout: '60'
  WebServerFleet:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn:
      - PublicRoute
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
      LaunchConfigurationName: !Ref WebServerLaunchConfig
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: !Ref WebServerCount
      LoadBalancerNames:
        - !Ref PublicElasticLoadBalancer
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: !Ref WebServerCount
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT5M
        WaitOnResourceSignals: 'no'
  WebServerLaunchConfig:
    DependsOn: IAMInstanceProfileApplication
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMITemplateApp
      IamInstanceProfile: !Ref IAMInstanceProfileApplication
      KeyName: !Ref KeyName
      AssociatePublicIpAddress: 'false'
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              cd /tmp
              
            - |
              # Allow Password authentication
            - |
              sed "s/^\(PasswordAuthentication\).*/\1 yes/g" -i /etc/ssh/sshd_config
            - |
              service sshd restart
            - |+
              
            - |
              # Set User Password
            - |+
            
            - "echo '"
            - !Ref UserPassword
            - "' | passwd ec2-user --stdin"
            - |+

            - |
              # CloudFormation response
            - |+

            - /opt/aws/bin/cfn-signal --success=true
            - ' --stack='
            - !Ref 'AWS::StackName'
            - ' --resource=WebServerFleet'
            - ' --region='
            - !Ref 'AWS::Region'
            - |+
            
      SecurityGroups:
        - !Ref WebServerSecurityGroup
        - !Ref SSHInternalSecurityGroup
  BastionLaunchConfig:
    DependsOn: IAMInstanceProfileApplication
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMITemplateApp
      IamInstanceProfile: !Ref IAMInstanceProfileApplication
      KeyName: !Ref KeyName
      AssociatePublicIpAddress: 'true'
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              cd /tmp
              
            - |
              # CloudFormation response
            - |+

            - /opt/aws/bin/cfn-signal --success=true
            - ' --stack='
            - !Ref 'AWS::StackName'
            - ' --resource=BastionFleet'
            - ' --region='
            - !Ref 'AWS::Region'
            - |+
            
      SecurityGroups:
        - !Ref SSHSecurityGroup
        - !Ref SSHInternalSecurityGroup
  BastionFleet:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn:
      - PublicRoute
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      LaunchConfigurationName: !Ref BastionLaunchConfig
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      LoadBalancerNames:
        - !Ref BastionElasticLoadBalancer
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT5M
        WaitOnResourceSignals: 'no'
  BastionElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      SecurityGroups:
        - !Ref SSHSecurityGroup
      Subnets:
        - !Ref PublicSubnet
      Listeners:
        - LoadBalancerPort: '22'
          InstancePort: '22'
          Protocol: TCP
      HealthCheck:
        Target: 'TCP:22'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '90'
        Timeout: '60'
Outputs:
  WebsiteURL:
    Value: !GetAtt 
      - PublicElasticLoadBalancer
      - DNSName
    Description: General Outputs
